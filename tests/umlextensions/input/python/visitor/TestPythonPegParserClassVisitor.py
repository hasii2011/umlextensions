
from unittest import TestSuite
from unittest import main as unitTestMain

from antlr4 import CommonTokenStream
from antlr4 import FileStream
from antlr4.error.ErrorListener import ConsoleErrorListener

from codeallybasic.UnitTestBase import UnitTestBase

from pyutmodelv2.PyutClass import PyutClass
from pyutmodelv2.PyutField import PyutField
from pyutmodelv2.PyutField import PyutFields
from pyutmodelv2.PyutType import PyutType
from pyutmodelv2.enumerations.PyutStereotype import PyutStereotype

from tests.umlextensions.input.python.visitor.BaseTestPythonPegVisitor import PyutFieldHashIndex
from umlextensions.input.python.pythonpegparser.PythonLexer import PythonLexer
from umlextensions.input.python.pythonpegparser.PythonParser import PythonParser
from umlextensions.input.python.visitor.ParserTypes import PyutClassName

from umlextensions.input.python.visitor.ParserTypes import PyutClasses
from umlextensions.input.python.visitor.PythonPegParserClassVisitor import PythonPegParserClassVisitor

from tests.umlextensions.input.python.visitor.BaseTestPythonPegVisitor import BaseTestPythonPegVisitor

class PythonErrorListener(ConsoleErrorListener):
    pass


class TestPythonPegParserClassVisitor(BaseTestPythonPegVisitor):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 27 October 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testParseEnumeration(self):

        pyutClasses: PyutClasses = self._parseSimpleEnumeration()
        classNames = pyutClasses.keys()
        self.assertIn('SimpleEnumeration', classNames, 'Missing enumeration')

    def testParseEnumerationFields(self):
        pyutClasses: PyutClasses = self._parseSimpleEnumeration()
        pyutClass:   PyutClass   = pyutClasses[PyutClassName('SimpleEnumeration')]

        self.assertEqual(PyutStereotype.ENUMERATION, pyutClass.stereotype, 'Enumerations need to be stereotyped correctly')

        self.assertEqual(5, len(pyutClass.fields), 'Number of enumeration fields does not match')

    def testEnumerationFieldValues(self):

        pyutClasses: PyutClasses = self._parseSimpleEnumeration()
        pyutClass:   PyutClass   = pyutClasses[PyutClassName('SimpleEnumeration')]

        fields: PyutFields         = pyutClass.fields
        index:  PyutFieldHashIndex = self._makeFieldIndex(pyutFields=fields)

        enumField: PyutField = index['Fks']
        self.assertEqual("'Frances K. Sanchez'", enumField.defaultValue, 'Did not parse value correctly')
        self.assertEqual(PyutType(''),           enumField.type,         'Should have an empty type')

    def testClassParsed(self):

        tree:    PythonParser.File_inputContext = self._setupPegBasedParser('SimpleClass.py')
        visitor: PythonPegParserClassVisitor    = PythonPegParserClassVisitor()

        visitor.visit(tree)

        pyutClasses: PyutClasses = visitor.pyutClasses
        classNames = pyutClasses.keys()
        self.assertIn('SimpleClass', classNames, 'Missing class name')
        pyutClass: PyutClass = pyutClasses[PyutClassName('SimpleClass')]
        self.logger.debug(f'{pyutClass=}')

    def testRetrieveClassNames(self):

        tree:    PythonParser.File_inputContext = self._setupPegBasedParser('AssociationClasses.py')
        visitor: PythonPegParserClassVisitor    = PythonPegParserClassVisitor()

        visitor.visit(tree)
        #
        # 3 regular and 2 synthetic classes
        #
        self.assertEqual(5, len(visitor.pyutClasses), 'Oops class names parsed, mismatch')

    def testSynthesizedTypes(self):

        tree:    PythonParser.File_inputContext = self._setupPegBasedParser('AssociationClasses.py')
        visitor: PythonPegParserClassVisitor    = PythonPegParserClassVisitor()

        visitor.visit(tree)

        pyutClasses: PyutClasses = visitor.pyutClasses

        classNames = pyutClasses.keys()
        self.assertIn('Pages',    classNames, 'Missing `Pages` class name')
        self.assertIn('Chapters', classNames, 'Missing `Chapters` class name')

    def testNonClassAssignmentIgnore(self):

        tree:    PythonParser.File_inputContext = self._setupPegBasedParser('NoContainingClassFile.py')
        visitor: PythonPegParserClassVisitor    = PythonPegParserClassVisitor()

        visitor.visit(tree)
        pyutClasses: PyutClasses = visitor.pyutClasses

        syntheticNames = pyutClasses.keys()
        self.assertIn('SyntheticType', syntheticNames, 'Missing class name')

    def _parseSimpleEnumeration(self) -> PyutClasses:
        tree:    PythonParser.File_inputContext = self._setupPegBasedParser('SimpleEnumeration.py')
        visitor: PythonPegParserClassVisitor      = PythonPegParserClassVisitor()

        visitor.visit(tree)
        return visitor.pyutClasses

    def _setupPegBasedParser(self, fileName: str) -> PythonParser.File_inputContext:

        fqFileName: str = UnitTestBase.getFullyQualifiedResourceFileName(BaseTestPythonPegVisitor.RESOURCES_TEST_CLASSES_PACKAGE_NAME, fileName)

        fileStream: FileStream  = FileStream(fqFileName)
        lexer:      PythonLexer = PythonLexer(fileStream)

        stream: CommonTokenStream = CommonTokenStream(lexer)
        parser: PythonParser      = PythonParser(stream)

        parser.removeParseListeners()
        parser.addErrorListener(PythonErrorListener())

        tree: PythonParser.File_inputContext = parser.file_input()
        if parser.getNumberOfSyntaxErrors() != 0:
            self.logger.error(f'File contains {parser.getNumberOfSyntaxErrors()} syntax errors')
            self.assertTrue(False, f'File contains {parser.getNumberOfSyntaxErrors()} syntax errors')

        return tree

def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestPythonPegParserClassVisitor))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
