
from typing import List
from unittest import TestSuite
from unittest import main as unitTestMain

from importlib.resources import files
from importlib.resources.abc import Traversable

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW
from pyutmodelv2.PyutClass import PyutClass
from umlshapes.frames.ClassDiagramFrame import ClassDiagramFrame
from umlshapes.lib.ogl import OGLInitialize
from umlshapes.pubsubengine.UmlPubSubEngine import UmlPubSubEngine

from tests.umlextensions.input.python.visitor.BaseTestPythonPegVisitor import BaseTestPythonPegVisitor
from umlextensions.input.python.PythonToUmlShapes import PythonToUmlShapes
from umlextensions.input.python.PythonToUmlShapes import UmlClassesDict
from umlextensions.input.python.visitor.ParserTypes import PyutClassName
from umlextensions.input.python.visitor.ParserTypes import PyutClasses

EXPECTED_PASS1_CLASSES: int = 2


# import the class you want to test here
# from org.pyut.template import template


class TestPythonToUmlShapes(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 28 October 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()
        self._umlPubSubEngine:   UmlPubSubEngine   = UmlPubSubEngine()
        self._classDiagramFrame: ClassDiagramFrame = ClassDiagramFrame(parent=self._topLevelWindow, umlPubSubEngine=self._umlPubSubEngine)

    def tearDown(self):
        super().tearDown()

    def testPass1(self):
        traversable: Traversable = files(BaseTestPythonPegVisitor.RESOURCES_TEST_CLASSES_PACKAGE_NAME)
        fileList:    List[str]   = ['SimpleClass.py', 'SimpleDataClass.py']

        pythonToUmlShapes: PythonToUmlShapes = PythonToUmlShapes(classDiagramFrame=self._classDiagramFrame, umlPubSubEngine=self._umlPubSubEngine)
        pyutClasses:       PyutClasses       = pythonToUmlShapes.pass1(directoryName=str(traversable),
                                                                       files=fileList,
                                                                       progressCallback=self._progressCallback,
                                                                       )

        self.assertEqual(EXPECTED_PASS1_CLASSES, len(pyutClasses), 'Not enough data model classes')

        simpleClass: PyutClass = pyutClasses[PyutClassName('SimpleClass')]
        self.assertEqual('SimpleClass', simpleClass.name, 'Name mismatch')

        simpleClass: PyutClass = pyutClasses[PyutClassName('SimpleDataClass')]
        self.assertEqual('SimpleDataClass', simpleClass.name, 'Name mismatch')

    def testPass2DeepInheritance(self):

        traversable: Traversable = files(BaseTestPythonPegVisitor.RESOURCES_TEST_CLASSES_PACKAGE_NAME)
        fileList:    List[str]   = ['DeepInheritance.py']

        pythonToUmlShapes: PythonToUmlShapes = PythonToUmlShapes(classDiagramFrame=self._classDiagramFrame, umlPubSubEngine=self._umlPubSubEngine)
        pyutClasses:       PyutClasses       = pythonToUmlShapes.pass1(directoryName=str(traversable),
                                                                       files=fileList,
                                                                       progressCallback=self._progressCallback,
                                                                       )
        self.logger.info(f'{len(pyutClasses)=}')

        updatedPyutClasses: PyutClasses = pythonToUmlShapes.pass2(directoryName=str(traversable),
                                                                  files=fileList,
                                                                  pyutClasses=pyutClasses,
                                                                  progressCallback=self._progressCallback
                                                                  )
        self.logger.info(f'{len(updatedPyutClasses)=}')

        umlClassesDict: UmlClassesDict = pythonToUmlShapes.generateUmlClasses(updatedPyutClasses)

        self.logger.info(f'{umlClassesDict=}')

        pythonToUmlShapes.generateLinks(umlClassesDict=umlClassesDict)
        self.assertEqual(4, len(pythonToUmlShapes.umlLinks), 'Did not generate enough links')

    def _progressCallback(self, currentFileCount: int, message: str):
        self.logger.info(f'{currentFileCount=} {message=}')

def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestPythonToUmlShapes))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
